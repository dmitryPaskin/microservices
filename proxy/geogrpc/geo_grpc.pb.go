// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: geo.proto

package geogrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeorerClient is the client API for Georer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeorerClient interface {
	SearchAddresses(ctx context.Context, in *SearchAddressesRequest, opts ...grpc.CallOption) (*SearchAddressesResponse, error)
	GeoCode(ctx context.Context, in *GeoCodeRequest, opts ...grpc.CallOption) (*GeoCodeResponse, error)
}

type georerClient struct {
	cc grpc.ClientConnInterface
}

func NewGeorerClient(cc grpc.ClientConnInterface) GeorerClient {
	return &georerClient{cc}
}

func (c *georerClient) SearchAddresses(ctx context.Context, in *SearchAddressesRequest, opts ...grpc.CallOption) (*SearchAddressesResponse, error) {
	out := new(SearchAddressesResponse)
	err := c.cc.Invoke(ctx, "/geogrpc.Georer/SearchAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *georerClient) GeoCode(ctx context.Context, in *GeoCodeRequest, opts ...grpc.CallOption) (*GeoCodeResponse, error) {
	out := new(GeoCodeResponse)
	err := c.cc.Invoke(ctx, "/geogrpc.Georer/GeoCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeorerServer is the server API for Georer service.
// All implementations must embed UnimplementedGeorerServer
// for forward compatibility
type GeorerServer interface {
	SearchAddresses(context.Context, *SearchAddressesRequest) (*SearchAddressesResponse, error)
	GeoCode(context.Context, *GeoCodeRequest) (*GeoCodeResponse, error)
	mustEmbedUnimplementedGeorerServer()
}

// UnimplementedGeorerServer must be embedded to have forward compatible implementations.
type UnimplementedGeorerServer struct {
}

func (UnimplementedGeorerServer) SearchAddresses(context.Context, *SearchAddressesRequest) (*SearchAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAddresses not implemented")
}
func (UnimplementedGeorerServer) GeoCode(context.Context, *GeoCodeRequest) (*GeoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeoCode not implemented")
}
func (UnimplementedGeorerServer) mustEmbedUnimplementedGeorerServer() {}

// UnsafeGeorerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeorerServer will
// result in compilation errors.
type UnsafeGeorerServer interface {
	mustEmbedUnimplementedGeorerServer()
}

func RegisterGeorerServer(s grpc.ServiceRegistrar, srv GeorerServer) {
	s.RegisterService(&Georer_ServiceDesc, srv)
}

func _Georer_SearchAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeorerServer).SearchAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geogrpc.Georer/SearchAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeorerServer).SearchAddresses(ctx, req.(*SearchAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Georer_GeoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeorerServer).GeoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geogrpc.Georer/GeoCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeorerServer).GeoCode(ctx, req.(*GeoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Georer_ServiceDesc is the grpc.ServiceDesc for Georer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Georer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geogrpc.Georer",
	HandlerType: (*GeorerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchAddresses",
			Handler:    _Georer_SearchAddresses_Handler,
		},
		{
			MethodName: "GeoCode",
			Handler:    _Georer_GeoCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geo.proto",
}
